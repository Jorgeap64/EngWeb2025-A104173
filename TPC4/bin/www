#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tpc5:server');
var http = require('http');
var exec = require('child_process');
const path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '1234');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*
=====================
running the jsonserver
=====================
*/
console.log( "__dirname: ", __dirname );
const inputFilePath = path.resolve( __dirname , "../dataset/cinema.json" );
console.log( 'Getting files...' );

console.log("Input File Path:", inputFilePath);

// start json-server
const jsonServerCommand = `json-server --watch "${ inputFilePath }"`;
const jsonServerProcess = exec.exec( jsonServerCommand, { stdio: 'ignore' } );
console.log( 'Executing json-server...' );

jsonServerProcess.stdout.on( 'data', ( data ) => {
    console.log( 'json-server:', data );
    
    // wait until json-server is ready
    if ( data.includes( 'Watching...' ) ) {
        console.log( 'json-server is ready. Starting server...' );
    }
});
  
// error json-server
jsonServerProcess.stderr.on( 'data' , ( data ) => {
    console.error( 'json-server error:', data );
    die
    jsonServerProcess.kill();
});
